/**\n * Enhanced Dashboard Component\n * Comprehensive analytics dashboard with security metrics, gamification, and real-time updates\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Box,\n  Grid,\n  Paper,\n  Typography,\n  Card,\n  CardContent,\n  LinearProgress,\n  Chip,\n  Avatar,\n  IconButton,\n  Tooltip,\n  Alert,\n  Divider,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Badge\n} from '@mui/material';\nimport {\n  TrendingUp,\n  Code,\n  Security,\n  Speed,\n  EmojiEvents,\n  School,\n  Psychology,\n  NetworkCheck,\n  Timeline,\n  Insights,\n  Refresh,\n  Warning,\n  CheckCircle,\n  Error,\n  AccessTime\n} from '@mui/icons-material';\nimport { Line, Doughnut, Bar, Radar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip as ChartTooltip,\n  Legend,\n  ArcElement,\n  BarElement,\n  RadialLinearScale\n} from 'chart.js';\nimport { apiClient } from '../../services/secureApi';\nimport { securityManager } from '../../utils/security';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  ChartTooltip,\n  Legend,\n  ArcElement,\n  BarElement,\n  RadialLinearScale\n);\n\ninterface DashboardData {\n  user_stats: {\n    total_courses: number;\n    completed_courses: number;\n    completion_rate: number;\n    code_executions: number;\n    tao_earned: number;\n    learning_streak: number;\n    study_hours: number;\n    ai_interactions: number;\n    validations_completed: number;\n  };\n  recent_activities: Array<{\n    type: string;\n    title: string;\n    description: string;\n    timestamp: string;\n    status: string;\n  }>;\n  learning_progress: {\n    weekly_goal_progress: number;\n    monthly_goal_progress: number;\n    favorite_languages: string[];\n    strongest_subjects: string[];\n    skill_levels: {\n      programming: number;\n      algorithms: number;\n      system_design: number;\n      ai_ml: number;\n    };\n  };\n  security_overview: {\n    security_score: number;\n    threats_blocked: number;\n    webvm_security_status: string;\n    last_security_scan: string;\n  };\n  achievements: Array<{\n    id: string;\n    title: string;\n    description: string;\n    icon: string;\n    earned_at: string;\n    rarity: string;\n  }>;\n  gamification: {\n    level: number;\n    xp_points: number;\n    next_level_progress: number;\n    badges: Array<{\n      id: string;\n      name: string;\n      description: string;\n      icon: string;\n      color: string;\n    }>;\n  };\n}\n\ninterface WebVMStats {\n  summary: {\n    total_instances: number;\n    active_instances: number;\n    total_executions: number;\n    success_rate: number;\n    avg_execution_time_ms: number;\n  };\n  environment_usage: Record<string, number>;\n  language_statistics: Record<string, number>;\n  recent_instances: Array<{\n    id: number;\n    name: string;\n    environment: string;\n    status: string;\n    created_at: string;\n    uptime_seconds: number;\n  }>;\n  resource_trends: {\n    cpu_trend: number;\n    memory_trend: number;\n    disk_trend: number;\n  };\n}\n\ninterface AdvancedAnalytics {\n  learning_velocity: {\n    daily_activity: Array<{ date: string; executions: number }>;\n    trend_analysis: string;\n    consistency_score: number;\n  };\n  skill_progression: {\n    languages: Record<string, any>;\n    complexity_growth: number;\n    error_rate_trend: number;\n  };\n  performance_analysis: {\n    avg_execution_time_ms: number;\n    performance_trend: string;\n    optimization_score: number;\n    fastest_execution: number;\n    slowest_execution: number;\n  };\n  efficiency_metrics: {\n    efficiency_score: number;\n    time_to_success_ratio: number;\n    optimal_learning_hours: string;\n    focus_recommendation: string;\n  };\n}\n\nexport const EnhancedDashboard: React.FC = () => {\n  const [dashboardData, setDashboardData] = useState<DashboardData | null>(null);\n  const [webvmStats, setWebvmStats] = useState<WebVMStats | null>(null);\n  const [advancedAnalytics, setAdvancedAnalytics] = useState<AdvancedAnalytics | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [lastRefresh, setLastRefresh] = useState(new Date());\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  const fetchDashboardData = useCallback(async () => {\n    try {\n      const [overviewRes, webvmRes, analyticsRes] = await Promise.all([\n        apiClient.get('/api/v1/dashboard/overview'),\n        apiClient.get('/api/v1/dashboard/webvm/stats'),\n        apiClient.get('/api/v1/dashboard/analytics/advanced')\n      ]);\n\n      setDashboardData(overviewRes.data);\n      setWebvmStats(webvmRes.data);\n      setAdvancedAnalytics(analyticsRes.data);\n      setLastRefresh(new Date());\n      setError(null);\n    } catch (err: any) {\n      console.error('Failed to fetch dashboard data:', err);\n      setError('Failed to load dashboard data');\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchDashboardData();\n  }, [fetchDashboardData]);\n\n  // Auto-refresh every 5 minutes\n  useEffect(() => {\n    if (!autoRefresh) return;\n\n    const interval = setInterval(fetchDashboardData, 5 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, [autoRefresh, fetchDashboardData]);\n\n  const handleRefresh = () => {\n    setLoading(true);\n    fetchDashboardData();\n  };\n\n  if (loading && !dashboardData) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Typography variant=\"h4\" gutterBottom>\n          Dashboard Loading...\n        </Typography>\n        <LinearProgress sx={{ mt: 2 }} />\n      </Box>\n    );\n  }\n\n  if (error) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Alert severity=\"error\" sx={{ mb: 2 }}>\n          {error}\n        </Alert>\n        <IconButton onClick={handleRefresh} color=\"primary\">\n          <Refresh />\n        </IconButton>\n      </Box>\n    );\n  }\n\n  if (!dashboardData) return null;\n\n  // Chart configurations\n  const skillRadarData = {\n    labels: ['Programming', 'Algorithms', 'System Design', 'AI/ML'],\n    datasets: [\n      {\n        label: 'Your Skills',\n        data: [\n          dashboardData.learning_progress.skill_levels.programming,\n          dashboardData.learning_progress.skill_levels.algorithms,\n          dashboardData.learning_progress.skill_levels.system_design,\n          dashboardData.learning_progress.skill_levels.ai_ml\n        ],\n        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n        borderColor: 'rgba(54, 162, 235, 1)',\n        borderWidth: 2,\n        pointBackgroundColor: 'rgba(54, 162, 235, 1)'\n      }\n    ]\n  };\n\n  const activityLineData = advancedAnalytics ? {\n    labels: advancedAnalytics.learning_velocity.daily_activity.map(d => d.date),\n    datasets: [\n      {\n        label: 'Daily Executions',\n        data: advancedAnalytics.learning_velocity.daily_activity.map(d => d.executions),\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        tension: 0.1\n      }\n    ]\n  } : { labels: [], datasets: [] };\n\n  const languageDonutData = webvmStats ? {\n    labels: Object.keys(webvmStats.language_statistics),\n    datasets: [\n      {\n        data: Object.values(webvmStats.language_statistics),\n        backgroundColor: [\n          '#FF6384',\n          '#36A2EB',\n          '#FFCE56',\n          '#4BC0C0',\n          '#9966FF',\n          '#FF9F40',\n          '#FF6384'\n        ]\n      }\n    ]\n  } : { labels: [], datasets: [] };\n\n  const getSecurityStatusColor = (status: string) => {\n    switch (status) {\n      case 'good': return 'success';\n      case 'warning': return 'warning';\n      case 'critical': return 'error';\n      default: return 'info';\n    }\n  };\n\n  const getRarityColor = (rarity: string) => {\n    switch (rarity) {\n      case 'legendary': return '#FFD700';\n      case 'epic': return '#9966FF';\n      case 'rare': return '#0066FF';\n      default: return '#888888';\n    }\n  };\n\n  return (\n    <Box sx={{ p: 3 }}>\n      {/* Header */}\n      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>\n        <Box>\n          <Typography variant=\"h4\" gutterBottom>\n            Enhanced Dashboard\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\">\n            Level {dashboardData.gamification.level} â€¢ {dashboardData.gamification.xp_points.toLocaleString()} XP\n          </Typography>\n        </Box>\n        <Box sx={{ display: 'flex', gap: 1, alignItems: 'center' }}>\n          <Tooltip title={`Last updated: ${lastRefresh.toLocaleTimeString()}`}>\n            <Typography variant=\"caption\" color=\"text.secondary\">\n              <AccessTime sx={{ fontSize: 14, mr: 0.5 }} />\n              {lastRefresh.toLocaleTimeString()}\n            </Typography>\n          </Tooltip>\n          <IconButton onClick={handleRefresh} disabled={loading}>\n            <Refresh />\n          </IconButton>\n        </Box>\n      </Box>\n\n      <Grid container spacing={3}>\n        {/* Key Metrics Row */}\n        <Grid item xs={12} md={3}>\n          <Card sx={{ background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)', color: 'white' }}>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography variant=\"h4\">{dashboardData.user_stats.code_executions}</Typography>\n                  <Typography variant=\"body2\">Code Executions</Typography>\n                </Box>\n                <Code sx={{ fontSize: 40, opacity: 0.7 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={3}>\n          <Card sx={{ background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)', color: 'white' }}>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography variant=\"h4\">{dashboardData.user_stats.tao_earned.toFixed(2)}</Typography>\n                  <Typography variant=\"body2\">TAO Earned</Typography>\n                </Box>\n                <TrendingUp sx={{ fontSize: 40, opacity: 0.7 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={3}>\n          <Card sx={{ background: 'linear-gradient(135deg, #4facfe 0%, #00f2fe 100%)', color: 'white' }}>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography variant=\"h4\">{dashboardData.user_stats.learning_streak}</Typography>\n                  <Typography variant=\"body2\">Day Streak</Typography>\n                </Box>\n                <EmojiEvents sx={{ fontSize: 40, opacity: 0.7 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item xs={12} md={3}>\n          <Card sx={{\n            background: `linear-gradient(135deg, #fa709a 0%, #fee140 100%)`,\n            color: 'white'\n          }}>\n            <CardContent>\n              <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>\n                <Box>\n                  <Typography variant=\"h4\">{dashboardData.security_overview.security_score}</Typography>\n                  <Typography variant=\"body2\">Security Score</Typography>\n                </Box>\n                <Security sx={{ fontSize: 40, opacity: 0.7 }} />\n              </Box>\n            </CardContent>\n          </Card>\n        </Grid>\n\n        {/* Learning Progress & Achievements */}\n        <Grid item xs={12} md={6}>\n          <Paper sx={{ p: 2, height: '400px' }}>\n            <Typography variant=\"h6\" gutterBottom>\n              <School sx={{ mr: 1 }} />\n              Skill Progression\n            </Typography>\n            <Box sx={{ height: '300px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n              <Radar data={skillRadarData} options={{ maintainAspectRatio: false, responsive: true }} />\n            </Box>\n          </Paper>\n        </Grid>\n\n        <Grid item xs={12} md={6}>\n          <Paper sx={{ p: 2, height: '400px' }}>\n            <Typography variant=\"h6\" gutterBottom>\n              <EmojiEvents sx={{ mr: 1 }} />\n              Achievements & Badges\n            </Typography>\n            <Box sx={{ mb: 2 }}>\n              <Typography variant=\"body2\" gutterBottom>Level Progress</Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={dashboardData.gamification.next_level_progress * 100}\n                sx={{ height: 8, borderRadius: 4 }}\n              />\n              <Typography variant=\"caption\" color=\"text.secondary\">\n                {Math.round(dashboardData.gamification.next_level_progress * 100)}% to Level {dashboardData.gamification.level + 1}\n              </Typography>\n            </Box>\n            <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>\n              {dashboardData.gamification.badges.map((badge) => (\n                <Tooltip key={badge.id} title={badge.description}>\n                  <Chip\n                    label={badge.name}\n                    icon={<span>{badge.icon}</span>}\n                    sx={{ bgcolor: badge.color, color: 'white' }}\n                    size=\"small\"\n                  />\n                </Tooltip>\n              ))}\n            </Box>\n            <Divider sx={{ my: 2 }} />\n            <Typography variant=\"subtitle2\" gutterBottom>Recent Achievements</Typography>\n            <List dense>\n              {dashboardData.achievements.map((achievement) => (\n                <ListItem key={achievement.id} disablePadding>\n                  <ListItemIcon>\n                    <Avatar sx={{ bgcolor: getRarityColor(achievement.rarity), width: 32, height: 32 }}>\n                      <span style={{ fontSize: '14px' }}>{achievement.icon}</span>\n                    </Avatar>\n                  </ListItemIcon>\n                  <ListItemText\n                    primary={achievement.title}\n                    secondary={achievement.description}\n                  />\n                </ListItem>\n              ))}\n            </List>\n          </Paper>\n        </Grid>\n\n        {/* Learning Activity Chart */}\n        <Grid item xs={12} md={8}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              <Timeline sx={{ mr: 1 }} />\n              Learning Activity\n            </Typography>\n            {advancedAnalytics && (\n              <Box>\n                <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>\n                  <Chip\n                    label={`Trend: ${advancedAnalytics.learning_velocity.trend_analysis}`}\n                    color={advancedAnalytics.learning_velocity.trend_analysis === 'increasing' ? 'success' : 'default'}\n                    size=\"small\"\n                  />\n                  <Chip\n                    label={`Consistency: ${Math.round(advancedAnalytics.learning_velocity.consistency_score * 100)}%`}\n                    color={advancedAnalytics.learning_velocity.consistency_score > 0.7 ? 'success' : 'warning'}\n                    size=\"small\"\n                  />\n                </Box>\n                <Box sx={{ height: '300px' }}>\n                  <Line data={activityLineData} options={{ maintainAspectRatio: false, responsive: true }} />\n                </Box>\n              </Box>\n            )}\n          </Paper>\n        </Grid>\n\n        {/* Language Usage */}\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              <Code sx={{ mr: 1 }} />\n              Language Usage\n            </Typography>\n            {webvmStats && (\n              <Box sx={{ height: '300px', display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\n                <Doughnut data={languageDonutData} options={{ maintainAspectRatio: false, responsive: true }} />\n              </Box>\n            )}\n          </Paper>\n        </Grid>\n\n        {/* Security Overview */}\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              <Security sx={{ mr: 1 }} />\n              Security Overview\n            </Typography>\n            <Box sx={{ mb: 2 }}>\n              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>\n                <Typography variant=\"body2\">Security Score</Typography>\n                <Typography variant=\"body2\" color=\"primary\" fontWeight=\"bold\">\n                  {dashboardData.security_overview.security_score}/100\n                </Typography>\n              </Box>\n              <LinearProgress\n                variant=\"determinate\"\n                value={dashboardData.security_overview.security_score}\n                color={dashboardData.security_overview.security_score > 80 ? 'success' : 'warning'}\n                sx={{ height: 8, borderRadius: 4 }}\n              />\n            </Box>\n            \n            <List dense>\n              <ListItem>\n                <ListItemIcon>\n                  <Badge badgeContent={dashboardData.security_overview.threats_blocked} color=\"error\">\n                    <Security color=\"action\" />\n                  </Badge>\n                </ListItemIcon>\n                <ListItemText\n                  primary=\"Threats Blocked\"\n                  secondary=\"Last 24 hours\"\n                />\n              </ListItem>\n              <ListItem>\n                <ListItemIcon>\n                  <Chip\n                    size=\"small\"\n                    label={dashboardData.security_overview.webvm_security_status}\n                    color={getSecurityStatusColor(dashboardData.security_overview.webvm_security_status) as any}\n                    icon={dashboardData.security_overview.webvm_security_status === 'good' ? <CheckCircle /> : <Warning />}\n                  />\n                </ListItemIcon>\n                <ListItemText\n                  primary=\"WebVM Security\"\n                  secondary=\"Environment status\"\n                />\n              </ListItem>\n            </List>\n          </Paper>\n        </Grid>\n\n        {/* Performance Metrics */}\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              <Speed sx={{ mr: 1 }} />\n              Performance\n            </Typography>\n            {advancedAnalytics && (\n              <Box>\n                <Box sx={{ mb: 2 }}>\n                  <Typography variant=\"body2\" gutterBottom>Efficiency Score</Typography>\n                  <LinearProgress\n                    variant=\"determinate\"\n                    value={Math.min(100, advancedAnalytics.efficiency_metrics.efficiency_score * 10)}\n                    color={advancedAnalytics.efficiency_metrics.efficiency_score > 5 ? 'success' : 'warning'}\n                    sx={{ height: 8, borderRadius: 4, mb: 1 }}\n                  />\n                  <Typography variant=\"caption\" color=\"text.secondary\">\n                    {advancedAnalytics.efficiency_metrics.efficiency_score.toFixed(1)}/10\n                  </Typography>\n                </Box>\n                \n                <List dense>\n                  <ListItem>\n                    <ListItemText\n                      primary=\"Avg Execution Time\"\n                      secondary={`${advancedAnalytics.performance_analysis.avg_execution_time_ms.toFixed(0)}ms`}\n                    />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText\n                      primary=\"Performance Trend\"\n                      secondary={advancedAnalytics.performance_analysis.performance_trend}\n                    />\n                    <Chip\n                      size=\"small\"\n                      label={advancedAnalytics.performance_analysis.performance_trend}\n                      color={\n                        advancedAnalytics.performance_analysis.performance_trend === 'improving'\n                          ? 'success'\n                          : advancedAnalytics.performance_analysis.performance_trend === 'declining'\n                          ? 'error'\n                          : 'default'\n                      }\n                    />\n                  </ListItem>\n                  <ListItem>\n                    <ListItemText\n                      primary=\"Optimization Score\"\n                      secondary={`${Math.round(advancedAnalytics.performance_analysis.optimization_score * 100)}%`}\n                    />\n                  </ListItem>\n                </List>\n              </Box>\n            )}\n          </Paper>\n        </Grid>\n\n        {/* Recent Activities */}\n        <Grid item xs={12} md={4}>\n          <Paper sx={{ p: 2 }}>\n            <Typography variant=\"h6\" gutterBottom>\n              <Insights sx={{ mr: 1 }} />\n              Recent Activity\n            </Typography>\n            <List dense>\n              {dashboardData.recent_activities.map((activity, index) => (\n                <ListItem key={index}>\n                  <ListItemIcon>\n                    {activity.type === 'code_executed' ? (\n                      <Code color=\"primary\" />\n                    ) : activity.type === 'tao_transaction' ? (\n                      <TrendingUp color=\"success\" />\n                    ) : (\n                      <Insights color=\"info\" />\n                    )}\n                  </ListItemIcon>\n                  <ListItemText\n                    primary={activity.title}\n                    secondary={\n                      <Box>\n                        <Typography variant=\"caption\" display=\"block\">\n                          {activity.description}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"text.secondary\">\n                          {new Date(activity.timestamp).toLocaleString()}\n                        </Typography>\n                      </Box>\n                    }\n                  />\n                  <Chip\n                    size=\"small\"\n                    label={activity.status}\n                    color={\n                      activity.status === 'completed' || activity.status === 'confirmed'\n                        ? 'success'\n                        : activity.status === 'pending'\n                        ? 'warning'\n                        : 'default'\n                    }\n                  />\n                </ListItem>\n              ))}\n            </List>\n          </Paper>\n        </Grid>\n      </Grid>\n    </Box>\n  );\n};\n\nexport default EnhancedDashboard;"