/**\n * Enhanced Landing Page Component\n * Modern, animated landing page with real-time metrics and interactive features\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport {\n  Box,\n  Container,\n  Typography,\n  Grid,\n  Card,\n  CardContent,\n  Button,\n  Paper,\n  Chip,\n  Avatar,\n  IconButton,\n  TextField,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Rating,\n  LinearProgress,\n  Skeleton\n} from '@mui/material';\nimport {\n  PlayArrow,\n  Code,\n  Security,\n  Speed,\n  Psychology,\n  CloudQueue,\n  TrendingUp,\n  People,\n  School,\n  Verified,\n  Launch,\n  ExpandMore,\n  Star,\n  Email,\n  CheckCircle,\n  Rocket,\n  DataUsage,\n  NetworkCheck,\n  AutoAwesome\n} from '@mui/icons-material';\nimport { keyframes, styled } from '@mui/material/styles';\nimport { Line } from 'react-chartjs-2';\nimport { apiClient } from '../../services/secureApi';\nimport { securityManager } from '../../utils/security';\n\n// Animations\nconst float = keyframes`\n  0% { transform: translateY(0px); }\n  50% { transform: translateY(-20px); }\n  100% { transform: translateY(0px); }\n`;\n\nconst glow = keyframes`\n  0% { box-shadow: 0 0 20px rgba(0, 123, 255, 0.3); }\n  50% { box-shadow: 0 0 40px rgba(0, 123, 255, 0.6); }\n  100% { box-shadow: 0 0 20px rgba(0, 123, 255, 0.3); }\n`;\n\nconst gradient = keyframes`\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n`;\n\n// Styled components\nconst HeroSection = styled(Box)(({ theme }) => ({\n  background: `linear-gradient(-45deg, #667eea, #764ba2, #f093fb, #f5576c)`,\n  backgroundSize: '400% 400%',\n  animation: `${gradient} 15s ease infinite`,\n  minHeight: '100vh',\n  display: 'flex',\n  alignItems: 'center',\n  color: 'white',\n  position: 'relative',\n  overflow: 'hidden'\n}));\n\nconst FloatingCard = styled(Card)(({ theme }) => ({\n  animation: `${float} 6s ease-in-out infinite`,\n  transition: 'all 0.3s ease',\n  '&:hover': {\n    transform: 'translateY(-10px) scale(1.02)',\n    boxShadow: theme.shadows[20]\n  }\n}));\n\nconst GlowButton = styled(Button)(({ theme }) => ({\n  animation: `${glow} 2s ease-in-out infinite alternate`,\n  background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n  border: 0,\n  borderRadius: 25,\n  boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n  color: 'white',\n  height: 48,\n  padding: '0 30px',\n  fontSize: '1.1rem',\n  fontWeight: 'bold'\n}));\n\nconst StatsCard = styled(Paper)(({ theme }) => ({\n  padding: theme.spacing(3),\n  textAlign: 'center',\n  background: 'rgba(255, 255, 255, 0.1)',\n  backdropFilter: 'blur(10px)',\n  border: '1px solid rgba(255, 255, 255, 0.2)',\n  borderRadius: 16,\n  color: 'white'\n}));\n\ninterface HeroStats {\n  users: {\n    total: number;\n    growth_rate: string;\n    active_today: number;\n  };\n  code_executions: {\n    total: number;\n    languages_supported: number;\n    success_rate: string;\n  };\n  learning_environments: {\n    active: number;\n    total_available: number;\n    uptime: string;\n  };\n  ai_network: {\n    interactions: number;\n    network_health: string;\n    decentralized_nodes: number;\n  };\n  platform_metrics: {\n    lines_of_code_executed: number;\n    tao_tokens_earned: string;\n    validations_completed: string;\n    community_size: number;\n  };\n}\n\ninterface Feature {\n  title: string;\n  description: string;\n  metrics: any;\n  languages?: string[];\n  features?: string[];\n  capabilities?: string[];\n  demo_available?: boolean;\n}\n\ninterface Testimonial {\n  id: string;\n  name: string;\n  role: string;\n  avatar: string;\n  content: string;\n  rating: number;\n  category: string;\n  metrics: any;\n  date: string;\n}\n\ninterface RealTimeActivity {\n  activity_feed: Array<{\n    type: string;\n    message: string;\n    language?: string;\n    environment?: string;\n    timestamp: string;\n    anonymous_user: string;\n  }>;\n  real_time_stats: {\n    executions_last_hour: number;\n    new_users_today: number;\n    active_environments: number;\n    concurrent_users: number;\n    global_uptime: string;\n  };\n  trending_languages: Array<{\n    language: string;\n    executions: number;\n    trend: string;\n  }>;\n}\n\nexport const EnhancedLandingPage: React.FC = () => {\n  const [heroStats, setHeroStats] = useState<HeroStats | null>(null);\n  const [features, setFeatures] = useState<Record<string, Feature>>({});\n  const [testimonials, setTestimonials] = useState<Testimonial[]>([]);\n  const [realTimeActivity, setRealTimeActivity] = useState<RealTimeActivity | null>(null);\n  const [newsletterEmail, setNewsletterEmail] = useState('');\n  const [newsletterDialog, setNewsletterDialog] = useState(false);\n  const [demoDialog, setDemoDialog] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const heroRef = useRef<HTMLDivElement>(null);\n  const featuresRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    fetchLandingData();\n    \n    // Real-time activity updates\n    const activityInterval = setInterval(fetchRealTimeActivity, 30000); // 30 seconds\n    \n    return () => clearInterval(activityInterval);\n  }, []);\n\n  const fetchLandingData = async () => {\n    try {\n      const [statsRes, featuresRes, testimonialsRes, activityRes] = await Promise.all([\n        apiClient.get('/api/v1/landing/hero-stats'),\n        apiClient.get('/api/v1/landing/features-showcase'),\n        apiClient.get('/api/v1/landing/testimonials'),\n        apiClient.get('/api/v1/landing/real-time-activity')\n      ]);\n\n      setHeroStats(statsRes.data);\n      setFeatures(featuresRes.data);\n      setTestimonials(testimonialsRes.data.testimonials);\n      setRealTimeActivity(activityRes.data);\n    } catch (error) {\n      console.error('Failed to fetch landing page data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchRealTimeActivity = async () => {\n    try {\n      const response = await apiClient.get('/api/v1/landing/real-time-activity');\n      setRealTimeActivity(response.data);\n    } catch (error) {\n      console.error('Failed to fetch real-time activity:', error);\n    }\n  };\n\n  const handleNewsletterSignup = async () => {\n    try {\n      if (!securityManager.validateEmail(newsletterEmail)) {\n        throw new Error('Invalid email address');\n      }\n\n      const sanitizedEmail = securityManager.sanitizeText(newsletterEmail);\n      await apiClient.post('/api/v1/landing/newsletter-signup', {\n        email: sanitizedEmail,\n        interests: ['ai-learning', 'web-development', 'blockchain']\n      });\n\n      setNewsletterDialog(true);\n      setNewsletterEmail('');\n    } catch (error) {\n      console.error('Newsletter signup failed:', error);\n    }\n  };\n\n  const scrollToFeatures = () => {\n    featuresRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  if (loading) {\n    return (\n      <Box sx={{ p: 3 }}>\n        <Skeleton variant=\"rectangular\" height={400} sx={{ mb: 2 }} />\n        <Grid container spacing={2}>\n          {[1, 2, 3, 4].map(i => (\n            <Grid item xs={12} md={3} key={i}>\n              <Skeleton variant=\"rectangular\" height={200} />\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n    );\n  }\n\n  return (\n    <Box>\n      {/* Hero Section */}\n      <HeroSection ref={heroRef}>\n        <Container maxWidth=\"lg\">\n          <Grid container spacing={4} alignItems=\"center\">\n            <Grid item xs={12} md={6}>\n              <Box sx={{ mb: 4 }}>\n                <Typography\n                  variant=\"h2\"\n                  component=\"h1\"\n                  gutterBottom\n                  sx={{\n                    fontWeight: 'bold',\n                    fontSize: { xs: '2.5rem', md: '3.5rem' },\n                    textShadow: '2px 2px 4px rgba(0,0,0,0.3)'\n                  }}\n                >\n                  Revolutionary AI Learning\n                </Typography>\n                <Typography\n                  variant=\"h5\"\n                  component=\"h2\"\n                  gutterBottom\n                  sx={{\n                    opacity: 0.9,\n                    fontSize: { xs: '1.2rem', md: '1.5rem' },\n                    mb: 3\n                  }}\n                >\n                  Browser-based coding environments powered by Bittensor AI network\n                </Typography>\n                <Typography\n                  variant=\"body1\"\n                  sx={{\n                    fontSize: '1.1rem',\n                    opacity: 0.8,\n                    mb: 4,\n                    maxWidth: 600\n                  }}\n                >\n                  Experience the future of programming education with WebAssembly virtual machines,\n                  decentralized AI validation, and TAO token rewards. No installations, no limits.\n                </Typography>\n                <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>\n                  <GlowButton\n                    size=\"large\"\n                    startIcon={<Rocket />}\n                    onClick={() => setDemoDialog(true)}\n                  >\n                    Start Coding Now\n                  </GlowButton>\n                  <Button\n                    variant=\"outlined\"\n                    size=\"large\"\n                    onClick={scrollToFeatures}\n                    sx={{\n                      color: 'white',\n                      borderColor: 'rgba(255, 255, 255, 0.5)',\n                      '&:hover': {\n                        borderColor: 'white',\n                        backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                      }\n                    }}\n                  >\n                    Learn More\n                  </Button>\n                </Box>\n              </Box>\n            </Grid>\n\n            <Grid item xs={12} md={6}>\n              {heroStats && (\n                <Grid container spacing={2}>\n                  <Grid item xs={6}>\n                    <StatsCard>\n                      <Typography variant=\"h3\" component=\"div\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        {heroStats.users.total.toLocaleString()}\n                      </Typography>\n                      <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                        Active Learners\n                      </Typography>\n                      <Chip\n                        label={heroStats.users.growth_rate}\n                        size=\"small\"\n                        sx={{ mt: 1, bgcolor: 'rgba(76, 175, 80, 0.2)', color: 'white' }}\n                      />\n                    </StatsCard>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <StatsCard>\n                      <Typography variant=\"h3\" component=\"div\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        {heroStats.code_executions.total.toLocaleString()}\n                      </Typography>\n                      <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                        Code Executions\n                      </Typography>\n                      <Chip\n                        label={heroStats.code_executions.success_rate}\n                        size=\"small\"\n                        sx={{ mt: 1, bgcolor: 'rgba(33, 150, 243, 0.2)', color: 'white' }}\n                      />\n                    </StatsCard>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <StatsCard>\n                      <Typography variant=\"h3\" component=\"div\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        {heroStats.ai_network.decentralized_nodes}\n                      </Typography>\n                      <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                        AI Nodes\n                      </Typography>\n                      <Chip\n                        label={heroStats.ai_network.network_health}\n                        size=\"small\"\n                        sx={{ mt: 1, bgcolor: 'rgba(156, 39, 176, 0.2)', color: 'white' }}\n                      />\n                    </StatsCard>\n                  </Grid>\n                  <Grid item xs={6}>\n                    <StatsCard>\n                      <Typography variant=\"h3\" component=\"div\" sx={{ fontWeight: 'bold', mb: 1 }}>\n                        {heroStats.platform_metrics.tao_tokens_earned}\n                      </Typography>\n                      <Typography variant=\"body2\" sx={{ opacity: 0.8 }}>\n                        TAO Earned\n                      </Typography>\n                      <Chip\n                        label=\"Growing\"\n                        size=\"small\"\n                        sx={{ mt: 1, bgcolor: 'rgba(255, 152, 0, 0.2)', color: 'white' }}\n                      />\n                    </StatsCard>\n                  </Grid>\n                </Grid>\n              )}\n            </Grid>\n          </Grid>\n        </Container>\n      </HeroSection>\n\n      {/* Real-time Activity Ticker */}\n      {realTimeActivity && (\n        <Box sx={{ bgcolor: 'rgba(0, 0, 0, 0.9)', color: 'white', py: 2 }}>\n          <Container maxWidth=\"lg\">\n            <Typography variant=\"body2\" gutterBottom sx={{ opacity: 0.7 }}>\n              🔴 LIVE ACTIVITY\n            </Typography>\n            <Box sx={{ overflow: 'hidden', height: 60 }}>\n              {realTimeActivity.activity_feed.slice(0, 3).map((activity, index) => (\n                <Typography\n                  key={index}\n                  variant=\"body2\"\n                  sx={{\n                    opacity: 0.9,\n                    py: 0.5,\n                    animation: `${float} ${3 + index}s ease-in-out infinite`\n                  }}\n                >\n                  {activity.anonymous_user}: {activity.message}\n                  {activity.language && (\n                    <Chip\n                      label={activity.language}\n                      size=\"small\"\n                      sx={{ ml: 1, height: 20, fontSize: '0.7rem' }}\n                    />\n                  )}\n                </Typography>\n              ))}\n            </Box>\n          </Container>\n        </Box>\n      )}\n\n      {/* Features Section */}\n      <Box ref={featuresRef} sx={{ py: 8, bgcolor: 'grey.50' }}>\n        <Container maxWidth=\"lg\">\n          <Typography\n            variant=\"h3\"\n            component=\"h2\"\n            align=\"center\"\n            gutterBottom\n            sx={{ fontWeight: 'bold', mb: 6 }}\n          >\n            Revolutionary Features\n          </Typography>\n          \n          <Grid container spacing={4}>\n            {Object.entries(features).map(([key, feature]) => (\n              <Grid item xs={12} md={6} lg={3} key={key}>\n                <FloatingCard sx={{ height: '100%' }}>\n                  <CardContent sx={{ p: 3 }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                      {key.includes('webvm') && <Code color=\"primary\" sx={{ mr: 1 }} />}\n                      {key.includes('bittensor') && <NetworkCheck color=\"primary\" sx={{ mr: 1 }} />}\n                      {key.includes('ai') && <Psychology color=\"primary\" sx={{ mr: 1 }} />}\n                      {key.includes('security') && <Security color=\"primary\" sx={{ mr: 1 }} />}\n                      <Typography variant=\"h6\" component=\"h3\" sx={{ fontWeight: 'bold' }}>\n                        {feature.title}\n                      </Typography>\n                    </Box>\n                    \n                    <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mb: 2 }}>\n                      {feature.description}\n                    </Typography>\n                    \n                    {feature.demo_available && (\n                      <Button\n                        variant=\"outlined\"\n                        size=\"small\"\n                        startIcon={<PlayArrow />}\n                        onClick={() => setDemoDialog(true)}\n                        sx={{ mb: 2 }}\n                      >\n                        Try Demo\n                      </Button>\n                    )}\n                    \n                    {feature.languages && (\n                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 0.5, mb: 2 }}>\n                        {feature.languages.slice(0, 4).map((lang) => (\n                          <Chip key={lang} label={lang} size=\"small\" variant=\"outlined\" />\n                        ))}\n                        {feature.languages.length > 4 && (\n                          <Chip label={`+${feature.languages.length - 4}`} size=\"small\" />\n                        )}\n                      </Box>\n                    )}\n                    \n                    {feature.features && (\n                      <List dense>\n                        {feature.features.slice(0, 3).map((item, index) => (\n                          <ListItem key={index} disablePadding>\n                            <ListItemIcon sx={{ minWidth: 24 }}>\n                              <CheckCircle color=\"success\" sx={{ fontSize: 16 }} />\n                            </ListItemIcon>\n                            <ListItemText\n                              primary={item}\n                              primaryTypographyProps={{ fontSize: '0.875rem' }}\n                            />\n                          </ListItem>\n                        ))}\n                      </List>\n                    )}\n                  </CardContent>\n                </FloatingCard>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      </Box>\n\n      {/* Testimonials Section */}\n      <Box sx={{ py: 8, bgcolor: 'white' }}>\n        <Container maxWidth=\"lg\">\n          <Typography\n            variant=\"h3\"\n            component=\"h2\"\n            align=\"center\"\n            gutterBottom\n            sx={{ fontWeight: 'bold', mb: 6 }}\n          >\n            What Our Community Says\n          </Typography>\n          \n          <Grid container spacing={4}>\n            {testimonials.slice(0, 3).map((testimonial) => (\n              <Grid item xs={12} md={4} key={testimonial.id}>\n                <FloatingCard sx={{ height: '100%' }}>\n                  <CardContent sx={{ p: 3 }}>\n                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>\n                      <Avatar\n                        src={testimonial.avatar}\n                        alt={testimonial.name}\n                        sx={{ mr: 2 }}\n                      >\n                        {testimonial.name.charAt(0)}\n                      </Avatar>\n                      <Box>\n                        <Typography variant=\"subtitle1\" sx={{ fontWeight: 'bold' }}>\n                          {testimonial.name}\n                        </Typography>\n                        <Typography variant=\"body2\" color=\"text.secondary\">\n                          {testimonial.role}\n                        </Typography>\n                      </Box>\n                    </Box>\n                    \n                    <Rating value={testimonial.rating} readOnly size=\"small\" sx={{ mb: 2 }} />\n                    \n                    <Typography variant=\"body2\" sx={{ mb: 2, fontStyle: 'italic' }}>\n                      \"{testimonial.content}\"\n                    </Typography>\n                    \n                    <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>\n                      {Object.entries(testimonial.metrics).slice(0, 2).map(([key, value]) => (\n                        <Chip\n                          key={key}\n                          label={`${key.replace('_', ' ')}: ${value}`}\n                          size=\"small\"\n                          variant=\"outlined\"\n                          sx={{ fontSize: '0.7rem' }}\n                        />\n                      ))}\n                    </Box>\n                  </CardContent>\n                </FloatingCard>\n              </Grid>\n            ))}\n          </Grid>\n        </Container>\n      </Box>\n\n      {/* CTA Section */}\n      <Box sx={{ py: 8, bgcolor: 'primary.main', color: 'white' }}>\n        <Container maxWidth=\"md\">\n          <Typography\n            variant=\"h3\"\n            component=\"h2\"\n            align=\"center\"\n            gutterBottom\n            sx={{ fontWeight: 'bold' }}\n          >\n            Ready to Transform Your Learning?\n          </Typography>\n          \n          <Typography variant=\"h6\" align=\"center\" sx={{ mb: 4, opacity: 0.9 }}>\n            Join thousands of developers already learning with AI-powered environments\n          </Typography>\n          \n          <Box sx={{ display: 'flex', justifyContent: 'center', gap: 2, mb: 4 }}>\n            <GlowButton\n              size=\"large\"\n              startIcon={<Launch />}\n              onClick={() => setDemoDialog(true)}\n            >\n              Start Free Trial\n            </GlowButton>\n          </Box>\n          \n          <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', gap: 2 }}>\n            <TextField\n              placeholder=\"Enter your email for updates\"\n              value={newsletterEmail}\n              onChange={(e) => setNewsletterEmail(e.target.value)}\n              sx={{\n                bgcolor: 'rgba(255, 255, 255, 0.1)',\n                borderRadius: 1,\n                '& .MuiInputBase-input': { color: 'white' },\n                '& .MuiOutlinedInput-notchedOutline': { borderColor: 'rgba(255, 255, 255, 0.3)' }\n              }}\n            />\n            <Button\n              variant=\"outlined\"\n              onClick={handleNewsletterSignup}\n              disabled={!newsletterEmail}\n              sx={{\n                color: 'white',\n                borderColor: 'rgba(255, 255, 255, 0.5)',\n                '&:hover': {\n                  borderColor: 'white',\n                  backgroundColor: 'rgba(255, 255, 255, 0.1)'\n                }\n              }}\n            >\n              Subscribe\n            </Button>\n          </Box>\n        </Container>\n      </Box>\n\n      {/* Demo Dialog */}\n      <Dialog\n        open={demoDialog}\n        onClose={() => setDemoDialog(false)}\n        maxWidth=\"md\"\n        fullWidth\n      >\n        <DialogTitle>\n          <Typography variant=\"h5\" component=\"div\" sx={{ fontWeight: 'bold' }}>\n            Interactive Demo\n          </Typography>\n        </DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body1\" sx={{ mb: 3 }}>\n            Experience L3ARN Labs firsthand with our interactive demo environment.\n          </Typography>\n          \n          <Grid container spacing={2}>\n            <Grid item xs={12} md={4}>\n              <Card sx={{ cursor: 'pointer', '&:hover': { bgcolor: 'action.hover' } }}>\n                <CardContent sx={{ textAlign: 'center' }}>\n                  <Code color=\"primary\" sx={{ fontSize: 48, mb: 2 }} />\n                  <Typography variant=\"h6\" gutterBottom>\n                    Code Editor\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Try our browser-based Python environment\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Card sx={{ cursor: 'pointer', '&:hover': { bgcolor: 'action.hover' } }}>\n                <CardContent sx={{ textAlign: 'center' }}>\n                  <NetworkCheck color=\"primary\" sx={{ fontSize: 48, mb: 2 }} />\n                  <Typography variant=\"h6\" gutterBottom>\n                    AI Network\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Experience Bittensor AI validation\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n            <Grid item xs={12} md={4}>\n              <Card sx={{ cursor: 'pointer', '&:hover': { bgcolor: 'action.hover' } }}>\n                <CardContent sx={{ textAlign: 'center' }}>\n                  <AutoAwesome color=\"primary\" sx={{ fontSize: 48, mb: 2 }} />\n                  <Typography variant=\"h6\" gutterBottom>\n                    AI Tutor\n                  </Typography>\n                  <Typography variant=\"body2\" color=\"text.secondary\">\n                    Get personalized learning guidance\n                  </Typography>\n                </CardContent>\n              </Card>\n            </Grid>\n          </Grid>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setDemoDialog(false)}>Close</Button>\n          <Button variant=\"contained\" onClick={() => window.open('/dashboard', '_blank')}>\n            Launch Demo\n          </Button>\n        </DialogActions>\n      </Dialog>\n\n      {/* Newsletter Success Dialog */}\n      <Dialog\n        open={newsletterDialog}\n        onClose={() => setNewsletterDialog(false)}\n        maxWidth=\"sm\"\n      >\n        <DialogTitle>\n          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n            <CheckCircle color=\"success\" />\n            <Typography variant=\"h6\">Successfully Subscribed!</Typography>\n          </Box>\n        </DialogTitle>\n        <DialogContent>\n          <Typography variant=\"body1\">\n            Thank you for subscribing to our newsletter. You'll receive updates about new features,\n            courses, and exclusive content.\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={() => setNewsletterDialog(false)} variant=\"contained\">\n            Great!\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  );\n};\n\nexport default EnhancedLandingPage;"